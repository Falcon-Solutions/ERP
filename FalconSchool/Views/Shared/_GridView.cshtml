@using Falcon.Entity;
@using System.Reflection;
@using System.Web.UI;
@using System.Runtime;
@using System.Collections.Generic;
@using System.Dynamic;
@using System.Linq.Expressions;

@functions{
    object GetColumnValue(object row, string columnName)
    {
        return DataBinder.Eval(row, columnName);
    }

    object GetColumnValue(object row, string columnName, string format)
    {
        return DataBinder.Eval(row, columnName, format);
    }

}



@{
    var modelColumn = ViewData.Model;

    if (@modelColumn.Count <= 0)
    {
        throw new Exception("No data passed to GridView User Control.");
    }

    var columns = @modelColumn[0].GetType().GetProperties();
    var primaryKey = Convert.ToString(ViewData.Eval("Id"));
}

@if (Convert.ToBoolean(ViewData.Eval("IsCreate")))
{
    <p>
        @*@Html.ActionLink("Create New " + @ViewData.Eval("PlaceHolder"), "Create" + @ViewData.Eval("PlaceHolder"), null, new { @class = "btn btn-primary" })*@
        @*<a id="btnNew" href="#" class="btn btn-primary" data-toggle="popover">Create New @ViewData.Eval("PlaceHolder")</a>*@
        <a href="#" class="btn btn-primary" data-toggle="modal" data-target="#createNewModal_@ViewData.Eval("PlaceHolder")">
            Create New @ViewData.Eval("PlaceHolder")
        </a>
    </p>
}
@*<%-- Show the Headers --%>*@
<div class="form-group">
    <div class="card">
        <h5 class="card-header hidden"></h5>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-bordered first">
                    <thead>
                        <tr>

                            @foreach (PropertyInfo prop in @columns)
                            {
                                int renderEnum = 0;
                                var resultInt = Int32.TryParse(Convert.ToString(prop.CustomAttributes.AsEnumerable().First().ConstructorArguments[0].Value), out renderEnum);

                                if (resultInt == true && renderEnum == 3)
                                {
                                    <th class="hidden-me">
                                        @prop.Name
                                    </th>
                                }
                                else
                                {
                                    <th class="col-auto">
                                        @prop.CustomAttributes.AsEnumerable().First().ConstructorArguments[0].Value
                                    </th>
                                }
                            }

                            @if (Convert.ToBoolean(ViewData.Eval("IsEdit")) || Convert.ToBoolean(ViewData.Eval("Details")) || Convert.ToBoolean(ViewData.Eval("IsDelete")))
                            {
                                <th class="col-auto">
                                    Action
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (object row in @modelColumn)
                        {
                            <tr>
                                @*Show Each Column*@
                                @foreach (PropertyInfo prop in @columns)
                                {
                                    int renderEnum = 0;
                                    var result = Int32.TryParse(Convert.ToString(prop.CustomAttributes.AsEnumerable().First().ConstructorArguments[0].Value), out renderEnum);

                                    <td class=@(result == true && renderEnum == 3 ? "hidden-me" : "col-auto" )>
                                        @{
                                            var typeCode = Type.GetTypeCode(prop.PropertyType);

                                            // String Columns
                                            if (typeCode == TypeCode.String)
                                            {
                                                @GetColumnValue(row, @prop.Name);
                                            }

                                            // DateTime Columns
                                            if (typeCode == TypeCode.DateTime)
                                            {

                                                @GetColumnValue(row, @prop.Name, "{0:D}"); ;

                                            }


                                            // Decimal Columns --
                                            if (typeCode == TypeCode.Decimal)
                                            {

                                                @GetColumnValue(row, @prop.Name, "{0:c}");

                                            }


                                            //-- Boolean Columns --
                                            if (typeCode == TypeCode.Boolean)
                                            {
                                                if ((bool)(@GetColumnValue(row, @prop.Name)))
                                                {

                                                    <input type="checkbox" disabled="disabled" checked="checked" />
                                                }
                                                else
                                                {

                                                    <input type="checkbox" disabled="disabled" />
                                                }
                                            }


                                            //-- Integer Columns --
                                            if (typeCode == TypeCode.Int32)
                                            {

                                                @GetColumnValue(row, @prop.Name);

                                            }
                                        }
                                    </td>
                                }

                                @* Action Menu *@

                                @if (Convert.ToBoolean(ViewData.Eval("IsEdit")) || Convert.ToBoolean(ViewData.Eval("Details")) || Convert.ToBoolean(ViewData.Eval("IsDelete")))
                                {
                                    <td class="col-auto" style="text-align-last: end;">
                                        @if (Convert.ToBoolean(ViewData.Eval("IsEdit")))
                                        {
                                            @Html.ActionLink("Edit", "Edit" + @ViewData.Eval("PlaceHolder"), new { id = @GetColumnValue(row, primaryKey) }, new { @class = "btn btn-primary btn-sm" })
                                        }

                                        @if (Convert.ToBoolean(ViewData.Eval("IsDetails")))
                                        {
                                            @Html.ActionLink("Details", "Details" + @ViewData.Eval("PlaceHolder"), new { id = @GetColumnValue(row, primaryKey) }, new { @class = "btn btn-primary btn-sm" })
                                        }

                                        @if (Convert.ToBoolean(ViewData.Eval("IsDelete")))
                                        {
                                            @Html.ActionLink("Delete", "Delete" + @ViewData.Eval("PlaceHolder"), new { id = @GetColumnValue(row, primaryKey) }, new { @class = "btn btn-primary btn-sm" })
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="createNewModal_@ViewData.Eval("PlaceHolder")" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create New @ViewData.Eval("PlaceHolder")</h5>
                <a href="#" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </a>
            </div>
            @Html.Partial("~/Views/Shared/_Create.cshtml", ViewData, new ViewDataDictionary { { "Controller", "Academic" }, { "HttpVerb", "HttpPost" }, { "ActionName", "Create" + @ViewData.Eval("PlaceHolder") } })
        </div>
    </div>
</div>




@*@using (Html.BeginForm("Create"+ @ViewData.Eval("PlaceHolder"), "AcademicController", "HttpPost"))
{
    @Html.AntiForgeryToken()

    <div class="modal fade" id="createNewModal_@ViewData.Eval("PlaceHolder")" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Create New @ViewData.Eval("PlaceHolder")</h5>
                    <a href="#" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </a>
                </div>
                <div class="modal-body">
                    <form class="needs-validation" novalidate>
                        <div class="row">
                            <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 ">
                                <label for="validationCustom01">@ViewData.Eval("PlaceHolder")</label>
                                <input type="text" class="form-control" id="validationCustom01" placeholder="@ViewData.Eval("PlaceHolder")" value="" required>
                                <div class="invalid-feedback">
                                    Please enter @ViewData.Eval("PlaceHolder")
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-secondary" data-dismiss="modal">Close</a>
                    <button class="btn btn-primary" type="submit">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}*@
<div id="popover_content_wrapper" style="display: none">
    <div class="modal-header">
        <div class="modal-title">Create New @ViewData.Eval("PlaceHolder")</div>
    </div>
    <div class="modal-body">
        <form class="needs-validation was-validated" novalidate>
            <div class="row">
                <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 ">
                    <label for="validationCustom01">@ViewData.Eval("PlaceHolder")</label>
                    <input type="text" class="form-control" id="validationCustom01" placeholder="@ViewData.Eval("PlaceHolder")" value="Mark" required="">
                    <div class="invalid-feedback">
                        Please enter @ViewData.Eval("PlaceHolder")
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn btn-secondary" data-dismiss="modal">Close</a>
        <button class="btn btn-primary" type="submit">Save changes</button>
        @*<a href="#" class="btn btn-primary">Save changes</a>*@
    </div>
</div>